def buildNumber = BUILD_NUMBER as int; // Get the build number as an integer
if (buildNumber > 1) milestone(buildNumber - 1); // Trigger milestone for the previous build number
milestone(buildNumber); // Trigger milestone for the current build number

@Library('mySharedLibrary@main') _ // Importing a shared library named 'mySharedLibrary'

pipeline {
  options {
      timeout(time: 1, unit: 'HOURS') 
  }
  agent {
    kubernetes {
      yaml libraryResource('kanikoPodTemplate.yml') // Use a Kubernetes pod template defined in a library resource
    }
  }
  environment {
    BUILD_NAME = "$PROJECT_NAME" + "-node-payments" // Set the build name based on the project name
    CI_COMMIT_SHA = "$GIT_BRANCH" + "_$GIT_COMMIT" // Set the commit SHA based on the branch and commit
    GIT_COMMIT_EMAIL = "$GIT_COMMITTER_EMAIL" // Set the commit email based on the committer's email
    GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim() // Get the last commit message
  }
  stages {
    stage("Build Docker images") {
		when {
			anyOf {
					branch 'dev'
					branch 'staging'
			}
			//not { changeset 'devops/**' } //This will skip the build step if any changes in devops folder
		}
		environment{
			BUILD = "$BUILD_NAME" + "-$GIT_BRANCH" // Set the build name for new deployment
			dockerfile = "Dockerfile" // Set the Dockerfile for npm cache
			project = "Fansportiz" // Set the project name
			ECR_URL = "$FW_ECR_URL" //Set the ECR URL 
		}
			steps {
				script {
					stage("Fantasy Node-Payments ${GIT_BRANCH} Build") {
						container(name: 'kaniko', shell: '/busybox/sh') {
							withCredentials([[
									$class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env.FW_AWS_CREDS}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],usernamePassword(credentialsId: "${env.FW_HELM_CREDS}", usernameVariable: 'HELMUNAME', passwordVariable: 'HELMPW'),usernamePassword(credentialsId: "${env.GIT_CREDS}", usernameVariable: 'gitUser', passwordVariable: 'gitPass')]) {
									script {
										build('${GIT_BRANCH}', '$dockerfile', '$project') // Execute npm cache for the project
										}
									}
							}
						}
						if (GIT_BRANCH == 'dev') {
							stage("Sonarqube Scanning") {
									container('sonarqube') {
											sh 'sonar-scanner'
									}
							}
           	}
				}
			}
    }
        stage("Fantasy Node-Payments Production Build") {
                when {
                        beforeInput true
                        branch 'master'
                        //not { changeset 'devops/**' } //This will skip the build step if any changes in devops folder
                }
            //     options {
            //     timeout(time: 1, unit: 'DAYS')
            //   }
              input {
                message "Should we continue for Production?"
                ok "Yes, we should."
              }
                environment{
                        BUILD = "$BUILD_NAME" + "-$GIT_BRANCH" // Set the build name for new deployment
                        dockerfile = "Dockerfile" // Set the Dockerfile for npm cache
                        project = "Fansportiz" // Set the project name
                        ECR_URL = "$FW_ECR_URL" //Set the ECR URL
                }
                        steps {
                                                container(name: 'kaniko', shell: '/busybox/sh') {
                                                        withCredentials([[
                                                                        $class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env.FW_AWS_CREDS}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],usernamePassword(credentialsId: "${env.FW_HELM_CREDS}", usernameVariable: 'HELMUNAME', passwordVariable: 'HELMPW'),usernamePassword(credentialsId: "${env.GIT_CREDS}", usernameVariable: 'gitUser', passwordVariable: 'gitPass')]) {
                                                                        script {
                                                                                build('${GIT_BRANCH}', '$dockerfile', '$project') // Execute npm cache for the project
                                                                                }
                                                        }
                                        }
                        }
    }
  	stage('Deploying....') {
		when {
			anyOf {
					branch 'dev'
					branch 'staging'
			}
		}		
			environment{
				namespace = "$GIT_BRANCH" // Sets the deployment namespace
				project = "Fansportiz" // Sets the project name
			}
			steps {
				script {
					stage("Fantasy Node-Payments ${GIT_BRANCH} Deploy") {
					// This stage deploys the project
						container('helm') { // Runs the steps within a Docker container
						withCredentials([[
							$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.FW_AWS_CREDS}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],usernamePassword(credentialsId: "${env.FW_HELM_CREDS}", usernameVariable: 'HELMUNAME', passwordVariable: 'HELMPW'), string(credentialsId: 'VS_CODE_CREDS', variable: 'VS_CREDS'),usernamePassword(credentialsId: "${env.GIT_CREDS}", usernameVariable: 'gitUser', passwordVariable: 'gitPass')]) {
									awsConfigure('$AWS_ACCESS_KEY_ID','$AWS_SECRET_ACCESS_KEY','$FW_REGION','$project')
									helmGenerate('${GIT_BRANCH}')
									deploy('${GIT_BRANCH}','$namespace')
							}
						}
					}
				}
			}
  	}
        stage('Fantasy Node-Payments Production Deploy') {
                when {
                        branch 'master'
                }                
                        environment{
                                namespace = "production" // Sets the deployment namespace
                                project = "Fansportiz" // Sets the project name
                        }
                        steps {
                                        // This stage deploys the project
                                                container('helm') { // Runs the steps within a Docker container
                                                withCredentials([[
                                                        $class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.FW_AWS_CREDS}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],usernamePassword(credentialsId: "${env.FW_HELM_CREDS}", usernameVariable: 'HELMUNAME', passwordVariable: 'HELMPW'), string(credentialsId: 'VS_CODE_CREDS', variable: 'VS_CREDS'),usernamePassword(credentialsId: "${env.GIT_CREDS}", usernameVariable: 'gitUser', passwordVariable: 'gitPass')]) {
                                                                        awsConfigure('$AWS_ACCESS_KEY_ID','$AWS_SECRET_ACCESS_KEY','$FW_REGION','$project')
                                                                        helmGenerate('${GIT_BRANCH}')
                                                                        deploy('${GIT_BRANCH}','$namespace')
                                                        }
                                }
                        }
          }
	}
  post{
		always{
                        script {
                                slackSend(channel: '#jenkins-alerts', color: 'good', message: "Build deployed ${currentBuild.currentResult} - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
                        }                        
				mail to: "${GIT_COMMIT_EMAIL}",cc: "vinayak.pawar@yudiz.com ",
				subject: "Your Pipeline Status For ${JOB_NAME}",
				body: "Jenkins Build For Job ${env.JOB_NAME} is ${currentBuild.currentResult}:, You can Find More Info. at ${env.BUILD_URL}"
			}
    }
}

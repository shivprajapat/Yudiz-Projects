def buildNumber = BUILD_NUMBER as int; if (buildNumber > 1) milestone(buildNumber - 1); milestone(buildNumber)

pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          nodeSelector:
            pv: jenkins        
          tolerations:
          - effect: NoSchedule
            key: pv
            operator: Equal
            value: jenkins
          containers:
          - name: docker
            image: public.ecr.aws/d7h0j7s7/gitlab-ci:latestv2argocd
            tty: true
            volumeMounts:
             - mountPath: /var/run/docker.sock
               name: docker-sock
          volumes:
          - name: docker-sock
            hostPath:
              path: /var/run/docker.sock    
        '''
    }
  }
  environment {
    BUILD_NAME = "$PROJECT_NAME" + "-feed-frontend"
    CI_COMMIT_SHA = "$GIT_BRANCH" + "_$GIT_COMMIT"
    GIT_COMMIT_EMAIL = sh (script: 'git --no-pager show -s --format=\'%ae\'',returnStdout: true).trim()
  }
  
  stages {
    stage('Crictracker Feed Local Dev Build') {
      when {
        beforeInput true
        branch 'dev'
      }
      environment{
        BUILD = "$BUILD_NAME" + "-local-dev"
        ECR = "$CRIC_ECR_URL" + "$BUILD"
        REACT_APP_ENV = "development"
        REACT_APP_URL_PREFIX = "https://feed-api.crictracker.ml/"
      }

      steps {
        container('docker') {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.CRIC_AWS_CREDS}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'], usernamePassword(credentialsId: "${env.CRIC_HELM_CREDS}", usernameVariable: 'HELMUNAME', passwordVariable: 'HELMPW'),usernamePassword(credentialsId: "${env.GIT_CREDS}", usernameVariable: 'gitUser', passwordVariable: 'gitPass')]) {

          //cache(path: ".npm", key: "$BUILD-${hashFiles('package-lock.json')}" , restoreKeys: ["$BUILD-${hashFiles('package-lock.json')}","$BUILD-"]) {
          sh ''' 
          mkdir .npm || true
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID; aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY; aws configure set default.region $CRIC_REGION
          aws eks --region $CRIC_REGION update-kubeconfig --name crictracker
          helm repo add --username $gitUser --password $gitPass crictracker-helmrepo $CRIC_HELM_GIT_URL
          helm repo update
          
          docker build --network=host --build-arg REACT_APP_ENV=$REACT_APP_ENV --build-arg REACT_APP_URL_PREFIX=$REACT_APP_URL_PREFIX -t $CRIC_ECR_URL$BUILD_NAME:$CI_COMMIT_SHA -f devops/Dockerfile .
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 693583001687.dkr.ecr.ap-south-1.amazonaws.com
          docker push $CRIC_ECR_URL$BUILD_NAME:$CI_COMMIT_SHA
          helm upgrade -n local-dev $BUILD crictracker-helmrepo/$BUILD --set=image=$CRIC_ECR_URL$BUILD_NAME:$CI_COMMIT_SHA
          '''
          //}
        }
      }
    }
  }
    stage('Crictracker Feed Dev Build') {
      when {
        beforeInput true
        branch 'stag'
      }
      environment{
        BUILD = "$BUILD_NAME" + "-dev"
        ECR = "$CRIC_ECR_URL" + "$BUILD"
        HELM_BUILD = "$BUILD_NAME" + "-prod-dev"
        REACT_APP_URL_PREFIX = "https://www.crictracker.com/"
        REACT_APP_ENV = "staging"
      }

      steps {
        container('docker') {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.CRIC_AWS_CREDS}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'], usernamePassword(credentialsId: "${env.CRIC_HELM_CREDS}", usernameVariable: 'HELMUNAME', passwordVariable: 'HELMPW'),usernamePassword(credentialsId: "${env.GIT_CREDS}", usernameVariable: 'gitUser', passwordVariable: 'gitPass')]) {

          //cache(path: ".npm", key: "$BUILD-${hashFiles('package-lock.json')}" , restoreKeys: ["$BUILD-${hashFiles('package-lock.json')}","$BUILD-"]) {
          sh ''' 
          mkdir .npm || true 
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID; aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY; aws configure set default.region $CRIC_REGION
          aws eks --region $CRIC_REGION update-kubeconfig --name crictracker
          helm repo add --username $gitUser --password $gitPass crictracker-helmrepo $CRIC_HELM_GIT_URL
          helm repo update

          docker build --network=host --build-arg REACT_APP_ENV=staging --build-arg REACT_APP_URL_PREFIX=$REACT_APP_URL_PREFIX -t $CRIC_ECR_URL$BUILD_NAME:$CI_COMMIT_SHA -f devops/Dockerfile .
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $CRIC_ECR_URL
          docker push $CRIC_ECR_URL$BUILD_NAME:$CI_COMMIT_SHA
          helm upgrade -n dev $BUILD crictracker-helmrepo/$HELM_BUILD --set=image=$CRIC_ECR_URL$BUILD_NAME:$CI_COMMIT_SHA
          docker rm $BUILD-npm || true
          docker create --name $BUILD-npm $CRIC_ECR_URL$BUILD_NAME:$CI_COMMIT_SHA
          rm -rf .npm
          docker cp $BUILD-npm:/root/.npm .npm
          '''
         // }
        }
      }
    }
  }
    stage('Crictracker Feed Frontend Master Build') {
      when {
        beforeInput true
        branch 'master'
      }
      options {
        timeout(time: 1, unit: 'DAYS') 
      }
      input {
        message "Should we continue for Production?"
        ok "Yes, we should."
      }
      environment{
        BUILD = "$BUILD_NAME" + "-prod"
        ECR = "$CRIC_ECR_URL" + "$BUILD"
        REACT_APP_ENV = "production"
        REACT_APP_URL_PREFIX = "https://feed-api.crictracker.com/"
      }

      steps {
        container('docker') {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.CRIC_AWS_CREDS}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'], usernamePassword(credentialsId: "${env.CRIC_HELM_CREDS}", usernameVariable: 'HELMUNAME', passwordVariable: 'HELMPW'),usernamePassword(credentialsId: "${env.GIT_CREDS}", usernameVariable: 'gitUser', passwordVariable: 'gitPass')]) {

        sh ''' 
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID; aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY; aws configure set default.region $CRIC_REGION
          aws eks --region $CRIC_REGION update-kubeconfig --name crictracker
          helm repo add --username $gitUser --password $gitPass crictracker-helmrepo $CRIC_HELM_GIT_URL
          helm repo update

          time docker build --network=host --build-arg REACT_APP_ENV=production --build-arg REACT_APP_URL_PREFIX=$REACT_APP_URL_PREFIX -t $CRIC_ECR_URL$BUILD_NAME:$CI_COMMIT_SHA -f devops/Dockerfile .
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $CRIC_ECR_URL
          docker push $CRIC_ECR_URL$BUILD_NAME:$CI_COMMIT_SHA
          time helm upgrade -n production $BUILD crictracker-helmrepo/$BUILD --set=image=$CRIC_ECR_URL$BUILD_NAME:$CI_COMMIT_SHA
          time kubectl rollout status -w deployment/$BUILD -n production
          '''
        }
      }
    }
  }
}
    post{
      always{
          mail to: "${GIT_COMMIT_EMAIL}",cc: "ravi.kyada@yudiz.com, kuldip.d@yudiz.in, leet.h@yudiz.in",
          subject: "Your Pipeline Status For ${JOB_NAME}",
          body: "Jenkins Build For Job ${env.JOB_NAME} is ${currentBuild.currentResult}:, You can Find More Info. at ${env.BUILD_URL}"
      }
    }
 }

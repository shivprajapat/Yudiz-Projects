import React, { useEffect, useRef, useState } from 'react'
import { BottomNavigation, BottomNavigationAction, Box, Grid } from '@mui/material'
import ReactApexChart from 'react-apexcharts'
import ChartContainer from 'Components/ChartContainer'
import Navbar from 'Components/Navbar'
import ChartDetail from 'Components/ChartDetail'
import { useDispatch, useSelector } from 'react-redux'
import { setBreadcrumb } from 'Redux/Actions/BreadCrumbAction'
import {
  LineWithDataLabel,
  PatternedStackedBarOptions,
  PieChart,
  PolarAreaChart,
  RadialBarOptions,
  StackedBarOptions
} from 'Constants/ChartOptions'
import { chartId, chartNames, chartTitles, dashboardTitle } from 'Helper/constant'

const VulnerabilityDashboard = () => {
  const dispatch = useDispatch()
  const scrollRef = useRef(null)

  const [shouldScroll, setShouldScroll] = useState(false)
  const [isSelected, setIsSelected] = useState('')
  const breadCrumb = useSelector((state) => state.breadcrumb)

  useEffect(() => {
    if (shouldScroll) {
      scrollRef.current.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'start' })
      setShouldScroll(false)
    }
  }, [shouldScroll, breadCrumb])

  function handleClick(severity) {
    setIsSelected(chartNames.radialBar)
    setShouldScroll(true)
    if (breadCrumb.length === 0) {
      const breadcrumbItem = {
        label: severity,
        path: chartId.systemSummary
      }

      dispatch(setBreadcrumb(breadcrumbItem))
    }
  }

  return (
    <>
      <Box
        component='div'
        className='mx-6 mt-5 mb-10'
        sx={{
          '& .apexcharts-canvas': {
            marginInline: 'auto'
          }
        }}
      >
        <Navbar title={dashboardTitle.vulnerability} />

        <Grid container spacing={2}>
          <Grid
            item
            xs={12}
            sm={12}
            md={6}
            lg={6}
            xl={3}
            className={`${
              isSelected && isSelected !== chartNames.radialBar ? 'opacity-[0.3] pointer-events-none cursor-not-allowed' : ''
            } cursor-pointer`}
          >
            <ChartContainer firstTitle={chartTitles.severitySummary}>
              <ReactApexChart options={RadialBarOptions} series={RadialBarOptions.series} type='radialBar' onClick={handleClick} />
              <BottomNavigation showLabels className='absolute inset-x-0 bottom-0'>
                <BottomNavigationAction label='HIGH-15' style={{ background: '#EC726E' }} className='font-bold text-sm' />
                <BottomNavigationAction label='MEDIUM-30' style={{ background: '#68C2DF' }} className='font-bold text-sm' />
                <BottomNavigationAction label='LOW-55' style={{ background: '#F0B05D' }} className='font-bold text-sm' />
              </BottomNavigation>
            </ChartContainer>
          </Grid>

          <Grid
            item
            xs={12}
            sm={12}
            md={6}
            lg={6}
            xl={4.5}
            className={`${
              isSelected && isSelected && isSelected !== chartNames.stackbar ? 'opacity-[0.3] pointer-events-none ' : ''
            } cursor-pointer`}
          >
            <ChartContainer firstTitle={chartTitles.portVulnerability}>
              <ReactApexChart options={StackedBarOptions} series={StackedBarOptions.series} type='bar' />
            </ChartContainer>
          </Grid>

          <Grid
            item
            xs={12}
            sm={12}
            md={6}
            lg={6}
            xl={4.5}
            className={`${
              isSelected && isSelected !== chartNames.lineWithLabel ? 'opacity-[0.3] pointer-events-none  cursor-not-allowed' : ''
            } cursor-pointer`}
          >
            <ChartContainer firstTitle={chartTitles.portVulnerability}>
              <ReactApexChart options={LineWithDataLabel} series={LineWithDataLabel.series} type='line' />
            </ChartContainer>
          </Grid>

          {breadCrumb.some((i) => i.path === chartId.systemSummary) ? (
            <Grid item xs={12} sm={12} md={12} lg={6} xl={12} className='flex content-center items-center py-8' ref={scrollRef}>
              <ChartDetail setIsSelected={setIsSelected} />
            </Grid>
          ) : (
            ''
          )}

          <Grid
            item
            xs={12}
            sm={12}
            md={6}
            lg={6}
            xl={3}
            className={`${
              isSelected && isSelected !== chartNames.polarArea ? 'opacity-[0.3] pointer-events-none  cursor-not-allowed' : ''
            } cursor-pointer`}
          >
            <ChartContainer firstTitle={chartTitles.topSummary} secondTitle={chartTitles.topSummary} thirdTitle={chartTitles.ip}>
              <ReactApexChart options={PolarAreaChart} series={PolarAreaChart.series} type='polarArea' />
            </ChartContainer>
          </Grid>

          <Grid item xl={9} xs={12}>
            <Grid
              container
              flexDirection={{ xs: '', md: '' }}
              spacing={2}
              className={`${
                isSelected && isSelected !== chartNames.patternArea ? 'opacity-[0.3] pointer-events-none  cursor-not-allowed' : ''
              } cursor-pointer`}
            >
              <Grid item xs={12} sm={12} md={12} lg={6} xl={8}>
                <ChartContainer firstTitle={chartTitles.topSummary}>
                  <ReactApexChart
                    options={PatternedStackedBarOptions}
                    series={PatternedStackedBarOptions.series}
                    type='bar'
                    width='100%'
                    height={370}
                  />
                </ChartContainer>
              </Grid>

              <Grid
                item
                xs={12}
                sm={12}
                md={6}
                lg={6}
                xl={4}
                className={`${
                  isSelected && isSelected !== chartNames.pie ? 'opacity-[0.3] pointer-events-none cursor-not-allowed' : ''
                } cursor-pointer`}
              >
                <ChartContainer firstTitle={chartTitles.topSummary} secondTitle={chartTitles.ip}>
                  <ReactApexChart options={PieChart} series={PieChart.series} type='pie' />
                </ChartContainer>
              </Grid>
            </Grid>
          </Grid>
        </Grid>
      </Box>
    </>
  )
}

export default VulnerabilityDashboard

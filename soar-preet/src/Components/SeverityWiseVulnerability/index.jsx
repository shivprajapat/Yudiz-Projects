import { Grid } from '@mui/material'
import WarningIcon from '@mui/icons-material/Warning'
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined'
import AddTaskIcon from '@mui/icons-material/AddTask'
import React from 'react'
import ReactApexChart from 'react-apexcharts'
import { MultipleRadarChart, PieChart, PolarAreaChart } from 'Constants/ChartOptions'
import ChartContainer from 'Components/ChartContainer'
import Table from 'Components/Table'
import TableWrapper from 'Components/TableWrapper'
import VulnerabilitySummary from 'Components/VulnerabilitySummary'
import { setBreadcrumb } from 'Redux/Actions/BreadCrumbAction'
import { useDispatch, useSelector } from 'react-redux'

import CommonRow from 'Components/CommonRow'
import { chartId, chartTitles, tableTitles } from 'Helper/constant'

function SeverityWiseVulnerability() {
  const dispatch = useDispatch()

  const breadCrumb = useSelector((state) => state.breadcrumb)

  const information = [
    {
      title: 'IP ADDRESS',
      value: '192.558454.1456'
    },
    {
      title: 'DEVICE NAME',
      value: 'Mac'
    },
    {
      title: 'OS NAME',
      value: 'Linux'
    }
  ]

  const headerData = [
    {
      title: 'HIGH',
      value: '10',
      icon: <WarningIcon className='text-high' />,
      color: '#EC726E'
    },
    {
      title: 'MEDIUM',
      value: '54',
      icon: <InfoOutlinedIcon className='text-[#0DD9FA]' />,
      color: '#EC726E'
    },
    {
      title: 'LOW',
      value: '04',
      icon: <InfoOutlinedIcon className='text-[#F4D402]' />,
      color: '#EC726E'
    },
    {
      title: 'LOG',
      value: '84',
      icon: <AddTaskIcon className='text-[#64FB05]' />,
      color: '#EC726E'
    }
  ]

  const ProgressData = [
    {
      title: 'New',
      progress: '20'
    },
    {
      title: 'Repeat',
      progress: '45'
    },
    {
      title: 'Solved',
      progress: '65'
    }
  ]

  const columns = [{ name: 'Scan Time' }, { name: 'High' }, { name: 'Medium' }, { name: 'Low' }, { name: 'Log' }]

  const secondColumns = [{ name: 'Vulnerability Name' }, { name: 'Severity' }, { name: 'Counts' }]

  const tableData = [
    { scanTime: '01-02-2023', high: '02', medium: '03', low: '04', log: '30' },
    { scanTime: '01-02-2023', high: '02', medium: '03', low: '04', log: '30' },
    { scanTime: '01-02-2023', high: '02', medium: '03', low: '04', log: '30' },
    { scanTime: '01-02-2023', high: '02', medium: '03', low: '04', log: '30' },
    { scanTime: '01-02-2023', high: '02', medium: '03', low: '04', log: '30' },
    { scanTime: '01-02-2023', high: '02', medium: '03', low: '04', log: '30' },
    { scanTime: '01-02-2023', high: '02', medium: '03', low: '04', log: '30' },
    { scanTime: '01-02-2023', high: '02', medium: '03', low: '04', log: '30' },
    { scanTime: '01-02-2023', high: '02', medium: '03', low: '04', log: '30' }
  ]

  const secondTableData = [
    { vulnerability: 'SSH Weak MAC Algorithms Supported', severity: 'Low', counts: '03' },
    { vulnerability: 'SSH Weak MAC Algorithms Supported', severity: 'Low', counts: '03' },
    { vulnerability: 'SSH Weak MAC Algorithms Supported', severity: 'Low', counts: '03' },
    { vulnerability: 'SSH Weak MAC Algorithms Supported', severity: 'Low', counts: '03' },
    { vulnerability: 'SSH Weak MAC Algorithms Supported', severity: 'Low', counts: '03' },
    { vulnerability: 'SSH Weak MAC Algorithms Supported', severity: 'Low', counts: '03' },
    { vulnerability: 'SSH Weak MAC Algorithms Supported', severity: 'Low', counts: '03' },
    { vulnerability: 'SSH Weak MAC Algorithms Supported', severity: 'Low', counts: '03' },
    { vulnerability: 'SSH Weak MAC Algorithms Supported', severity: 'Low', counts: '03' },
    { vulnerability: 'SSH Weak MAC Algorithms Supported', severity: 'Low', counts: '03' }
  ]

  function handleClick(vulnerabilitySummary) {
    const breadcrumbItem = {
      label: vulnerabilitySummary,
      path: chartId.vulnerabilitySummary
    }

    dispatch(setBreadcrumb(breadcrumbItem))
  }

  return (
    <>
      {breadCrumb.some((i) => i.path === chartId.vulnerabilitySummary) ? (
        <VulnerabilitySummary />
      ) : (
        <div className='p-10 w-full'>
          <div className='bg-lightBlue '>
            <div className='flex gap-10 p-[20px]'>
              {information.map((data) => (
                <div className='flex flex-col '>
                  <span className='text-white'>{data?.title}</span>
                  <span className='text-white'>{data?.value}</span>
                </div>
              ))}
            </div>
            <Grid container className='cursor-pointer' spacing={2}>
              {ProgressData.map((data) => (
                <Grid item xs={12} sm={12} md={12} lg={12} xl={4}>
                  <div class='w-full bg-gray-200  flex flex-row gap-4  items-center border p-1 h-9 dark:bg-gray-700'>
                    <span className='text-white'>{data?.title}</span>
                    <div
                      style={{ width: `${data?.progress}%` }}
                      className={`h-full flex flex-col ${
                        data?.progress <= 20
                          ? 'bg-[#6CCDE2]'
                          : data?.progress > 20 && data?.progress <= 50
                          ? 'bg-[#FC8080]'
                          : 'bg-[#6FE26C]'
                      }`}
                    ></div>
                    <span className='text-white'>{data?.progress}%</span>
                  </div>
                </Grid>
              ))}

              {headerData.map((data) => (
                <Grid item xs={12} sm={12} md={6} lg={6} xl={3}>
                  <div className='p-10  m-4 bg-black flex flex-row  justify-between items-start content-between'>
                    <div className='flex flex-col '>
                      <h1 className='text-white'>{data.value}</h1>
                      <p className='text-white'>{data.title}</p>
                    </div>
                    <div className={`flex flex-col text-white `}>{data?.icon}</div>
                  </div>
                </Grid>
              ))}
            </Grid>
          </div>

          <div className='flex justify-center items-center p-10'>
            <Grid container spacing={2} className='cursor-pointer'>
              <Grid item xs={12} sm={12} md={6} lg={6} xl={3}>
                <ChartContainer firstTitle={chartTitles.topSummary}>
                  <ReactApexChart
                    onClick={handleClick}
                    options={MultipleRadarChart}
                    series={MultipleRadarChart.series}
                    height='390px'
                    type='radar'
                  />
                </ChartContainer>
              </Grid>

              <Grid item xs={12} sm={12} md={6} lg={6} xl={3}>
                <ChartContainer firstTitle={chartTitles.topSummary} secondTitle={chartTitles.topSummary} thirdTitle={chartTitles.ip}>
                  <ReactApexChart options={PolarAreaChart} series={PolarAreaChart.series} type='polarArea' />
                </ChartContainer>
              </Grid>

              <Grid item xs={12} sm={12} md={6} lg={6} xl={3}>
                <ChartContainer firstTitle={chartTitles.topSummary} secondTitle={chartTitles.ip}>
                  <ReactApexChart options={PieChart} series={PieChart.series} type='pie' />
                </ChartContainer>
              </Grid>
            </Grid>
          </div>

          <div className='flex justify-center items-center'>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={12} md={12} lg={12} xl={6}>
                <TableWrapper title={tableTitles.scanTable}>
                  <Table columns={columns} minWidth={'min-w-[750px]'}>
                    {tableData?.map((data, index) => {
                      return (
                        <CommonRow
                          data={[
                            { children: data?.scanTime },
                            { children: data?.high, className: 'bg-high' },
                            { children: data?.medium, className: 'bg-medium' },
                            { children: data?.low, className: 'bg-low' },
                            { children: data?.log, className: 'bg-log' }
                          ]}
                          index={index}
                        />
                      )
                    })}
                  </Table>
                </TableWrapper>
              </Grid>
              <Grid item xs={12} sm={12} md={12} lg={12} xl={6}>
                <TableWrapper title={tableTitles.vulnerabilityTable}>
                  <Table columns={secondColumns} minWidth={'min-w-[750px]'}>
                    {secondTableData?.map((data, index) => {
                      return (
                        <CommonRow
                          data={[{ children: data?.vulnerability }, { children: data?.severity }, { children: data?.counts }]}
                          index={index}
                        />
                      )
                    })}
                  </Table>
                </TableWrapper>
              </Grid>
            </Grid>
          </div>
        </div>
      )}
    </>
  )
}

export default SeverityWiseVulnerability

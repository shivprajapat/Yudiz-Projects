const router = require('express').Router()
const projectService = require('./services')
const { validateProjects } = require('./validators')
const validateInput = require('./validators')
const { validate, setLanguage, isAuthenticated, isAuthorized, isOtherPermission } = require('../../middlewares/middleware')

router.use(setLanguage, isAuthenticated, isOtherPermission)
  .get('/project/metadata/v1', isAuthorized('VIEW_PROJECT'), validate, projectService.getS3Contract)
  .post('/project/v1', isAuthorized('PROJECT'), validate, projectService.addProject) // not in use
  .put('/project/v2', isAuthorized('PROJECT'), validateProjects, projectService.addProjectV2)
  .post('/project/pre-signed-url/v1', isAuthorized('CREATE_PROJECT'), validateInput.preSignedUrlValidate, validate, projectService.getSignedUrl)
  .get('/project/:id/v1', isAuthorized('VIEW_PROJECT'), validateInput.getProjectCheck, validate, projectService.getProject)
  .get('/projects/v1', isAuthorized('VIEW_PROJECT'), projectService.getProjects)
  .delete('/project/:id/v1', isAuthorized('DELETE_PROJECT'), validateInput.deleteProjectCheck, validate, projectService.deleteProject)
  .get('/project/:id/employees/v1', isAuthorized('VIEW_PROJECT'), validateInput.getProjectsByEmployee, validate, projectService.getProjectByEmployee)
  // .delete('/project/contract/v1', isAuthorized(), validate, projectService.deleteS3Contract) // not in use
  .get('/download', isAuthorized('VIEW_PROJECT'), projectService.downloadFileFromS3) // not in use
  .get('/review/:id/employees/v1', isAuthorized('VIEW_PROJECT'), validateInput.getReviewByEmployeeCheck, validate, projectService.getReviewByEmployee)
  .put('/review/:id/employees/add/v1', isAuthorized('UPDATE_PROJECT'), validateInput.addReviewByEmployeeCheck, validate, projectService.addReviewByEmployee)
  .put('/review/:id/employees/update/v1', isAuthorized('UPDATE_PROJECT'), validateInput.updateReviewByEmployeeCheck, validate, projectService.updateReviewByEmployee)
  .put('/review/:id/employees/delete/v1', isAuthorized('UPDATE_PROJECT'), validateInput.deleteReviewByEmployeeCheck, validate, projectService.deleteReviewByEmployee)
  .post('/project/pre-signed-url-image/v1', isAuthorized('CREATE_PROJECT'), projectService.getSignedUrlForImage)
  .get('/projectsEmployee/:id/v1', isAuthorized('VIEW_PROJECT'), projectService.getProjectsByEmployee)
  .put('/updateProjectDepartment/v1', isAuthorized('UPDATE_PROJECT'), projectService.updateProjectdepartment)
  .post('/addProjectDepartment/v1', isAuthorized('UPDATE_PROJECT'), validateInput.addProjectDepartmentCheck, projectService.addProjectdepartments)
  .delete('/deleteProjectDepartment/v1', isAuthorized('UPDATE_PROJECT'), projectService.deleteProjectdepartments)
  .post('/addProjectEmployee/v1', isAuthorized('UPDATE_PROJECT'), projectService.addProjectEmployee)
  .post('/addProjectEmployee/v2', isAuthorized('UPDATE_PROJECT'), projectService.addProjectEmployeeV2)
  .put('/updateProjectEmployee/v1', isAuthorized('UPDATE_PROJECT'), projectService.updateProjectemployee)
  .put('/updateProjectEmployee/v2', isAuthorized('UPDATE_PROJECT'), projectService.updateProjectemployeeV2)
  .delete('/deleteProjectEmployee/v1', isAuthorized('UPDATE_PROJECT'), projectService.deleteProjectEmployee)
  .put('/updateProjectDepartments/:iProjectId/v1', isAuthorized('UPDATE_PROJECT'), projectService.updateProjectdepartments)
  .get('/employeeProjects', isAuthorized('VIEW_PROJECT'), projectService.getEmployeeProjects)
  .get('/projectAllocatedEmployee/:id/v1', isAuthorized('VIEW_PROJECT'), projectService.getProjectAllocatedEmployees)
  .get('/calc', isAuthorized('VIEW_PROJECT'), projectService.cals) // x
  .get('/calcWork', isAuthorized('VIEW_PROJECT'), projectService.calcWorkLogsBasedProjects)
  .get('/calcWorkcr', isAuthorized('VIEW_PROJECT'), projectService.calcWorkLogsBasedCrs)
  .get('/departmentProjectDash', isAuthorized('VIEW_PROJECT'), projectService.getDepartmentProjectsDash)
  .get('/departmentCrDash', isAuthorized('VIEW_PROJECT'), projectService.getDepartmentCrDash)
  .get('/checks3post', isAuthorized('VIEW_PROJECT'), projectService.checks3post)
  .get('/projectDepartments', isAuthorized('VIEW_PROJECT'), projectService.getProjectDepartments)
  .post('/projectEmployeeOfDepartment', isAuthorized('VIEW_PROJECT'), projectService.projectEmployeeOfDepartment)
  .put('/projectEmployee/v1', isAuthorized('VIEW_PROJECT'), projectService.getProjectEmployee)
  .post('/xyz', isAuthorized('VIEW_PROJECT'), projectService.xyz)
  .post('/project/projectContract', isAuthorized('UPDATE_PROJECT'), projectService.projectContract)
  .put('/project/projectContractDelete', isAuthorized('UPDATE_PROJECT'), projectService.deleteS3Contract)
  .post('/employeeproject/:iEmployeeId', projectService.getEmployeeProject)
  .post('/totalrevenue/:iEmployeeId', projectService.getTotalEmployeeRevenue)
  .get('/projects/closed/v1', isAuthorized('VIEW_CLOSED_PROJECT'), projectService.getClosedProjects)
  .put('/project/retrive/:id/v1', isAuthorized('UPDATE_CLOSED_PROJECT'), validateInput.getProjectCheck, validate, projectService.projectRetrive)

module.exports = router
